package project.euler.fibonnaci;
//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Fibonacci {

    List<Long> fibbonacci = new ArrayList<>();
    BigInteger result;

    public void countTask(){
        putNumbersIntoArray();
        Stream<Long> stream = filtrfibbonacci();
        Long sum = sumFibbonacci(stream);
        System.out.println(sum);
    }

    private Long sumFibbonacci(Stream<Long>stream) {
         return stream.mapToLong(Long::longValue).sum();
    }

    private Stream<Long> filtrfibbonacci() {
        return fibbonacci.stream().filter(i -> i%2 == 0 );
    }

    private void putNumbersIntoArray() {
        long a = 0;
        long b = 1;
        long temp;
        while (b < 4000000 - a){
            temp = b;
            b = a + b;
            a = temp;
            fibbonacci.add(b);
//            System.out.println(fibbonacci);
        }
    }
}
